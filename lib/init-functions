#!/bin/sh
#
# This holds a bunch of functions used by the build routines and all the
# default directory locations.
#

# These should be the default directories where the libarduino
# package will get installed to.  The paths here need to be turned
# into autotools paths.
#
#prefix=/usr/local
#exec_prefix=${prefix}
#libdir=${exec_prefix}/lib
#localstatedir=${prefix}/var/lib/libarduino
#datarootdir=${prefix}/share/libarduino
#datadir=${datarootdir}/libarduino


exec_prefix=${prefix}
#exec_prefix=@prefix@
libdir=`pwd`/../lib
#libdir=@libdir@
localstatedir=${prefix}/lib/libarduino
#localstatedir=${HOME}/.@PKGNAME@
datarootdir=`pwd`/../data
datadir=${datarootdir}

# Set up file paths for building arduino libs and apps.
arduino_prefix=`pwd`/test
#arduino_prefix=${HOME}/.${PKGNAME}
arduino_libdir=${arduino_prefix}/lib
arduino_includedir=${arduino_prefix}/include
arduino_localstatedir=${arduino_prefix}/build
arduino_srcdir=${arduino_prefix}/src

# The arduino source version included with this package
ARDUINO_VERSION="0022"

#
# This figures out the absolute path of any give path.
#
abspath () {
   dir=$1

   # Basically, if the path begins with a '/', it's absolute.  Otherwise,
   # it's relative so tack on the pwd results.
   case $dir in
      /*) echo $1 ;;
      *) echo `pwd`/$1 ;;
   esac
} # abspath


#
# This function pulls out all the relative headers in a c/c++/pde file.
#
relhdrs () {
   srcfiles=$*

   grep -s "^#include" $srcfiles | cut -d\" -f2 -s | sort -u
} # relhdrs


#
# This returns the relative paths of the arduino libraries based
# on the library name.
#
arduino_srcpath () {
   libname=$1

   if [ "${libname}" = "arduino" ] ; then
      echo hardware/arduino/cores/arduino;
   else
      echo libraries/${libname};
   fi
} # arduino_libpath
